{mainmatter}

# Reproducible Research with Docker

Docker[^docker] is a minimal virtual machine. A virtual machine is a lightweight computing environment 
on which one can install and run software without installation of the software on user's machine/ 
OS system. For example, you can program a Docker container to run R version 3.0, whereas you might 
have R version 3.2.0 installed on your own computer. In other words, with Docker you can run multiple
computing environments on one machine in parallel without disrupting the functionality 
of one or the other. In the context of research reproducibility, the data, source codes and any dependencies 
are programmed into containers. Docker connects these containers to produce the final computing environment, 
or the Docker image. Docker images can be very large in size. However, they can be easily run and shared.
For this reason, Docker is becoming a popular technology for software development.

In this section I'll provide complete instructions to create a Docker image that initiates an instance of
R-Studio Server. The data and source codes will be mounted on this instance of R-Studio Server by 
programming Docker, therefore, enabling to reproduce the results. Programming of Docker containers is done
by writing `Dockerfile`s. A `Dockerfile` is a simple text file (without any suffix) that contains a set of 
Docker-specific instructions. Like any other technologies Docker has it's own markup language, but generally
the language is very similar to unix command-lines. Please note that basic knowledge of unix command lines is
essential in building Docker images. I'll first start by a minimal tutorial on Docker markup language.

[^docker]: https://docs.docker.com/

## Minimal Docker tutorial

A `Dockerfile` contains a set of instructions that tell Docker what needs to be done. The instructions
are by followed by Unix commands. Similar to a computer which
requires an operation system to work, Docker would need a OS to be installed on it. 
For example:

```
$ cat Dockerfile


FROM ubuntu:14.04
RUN mkdir scripts
WORKDIR /scripts
```

The `FROM` instruction tells docker to import Ubuntu image version 14.04 from ubuntu repository on DockerHub [^dockerHub].
This, in fact, installs Ubuntu on our Docker image. The `RUN` instruction tells Docker that the following command is a 
unix command and should be treated accordingly. So Docker runs `mkdir scripts` on Ubuntu and creates the `scripts/` directory.
The `WORKDIR` instruction is similar `cd` in unix, and changes the current working directory to the `scripts/` directory that was
just created in the previous step. 

Docker instructions `ADD` or `COPY` can be used to add or copy a file from your local directory to the Docker container.
`CMD` will run the program/executable specified by the following command. 

~~~~~~~~
FROM r-base
COPY . /usr/local/src/myscripts
WORKDIR /usr/local/src/myscripts
CMD ["Rscript", "myscript.R"]
~~~~~~~~ 

In the above example, the latest version of `base-r` image is imported. `COPY` makes a copy of the contents of the
current directory to the `/usr/local/src/myscripts` directory on Docker. `WORKDIR` changes the directory to `myscripts`
and `CMD` runs `myscript.R` using the command-line executable `Rscripts`. There are a couple more Docker instructions that you
will see in this chapter: `EXPOSE` and `MAINTAINER`. The `EXPOSE` instruction informs Docker that the container listens 
on the specified network ports at runtime. The `MAINTAINER` instruction tells who has made the image. For more details
on Docker instructions see [Best practices for writing Dockerfiles](https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/)



[^dockerHub]: DockerHub is a repository for Docker images. Anyone interested in publishing their Dockerfile publicly, would push their image to this repository.

[^bestPractices]: https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/

## Writing Dockerfiles

As discussed, Docker provides a null computing environment that can be programmed and customised through Docker instructions.
Therefore, in order to make Docker run a R-Studio session, we would need to have an OS such as Ubuntu installed to have a programmable environment.
We can then install R, R-Studio Server and any other dependencies. We can also install executables such as Git or wget, if we are going to download from a link or clone the data
from a version control repository, such as GitHub. In addition, we can setup user accounts and tell Docker to listen for network ports at the runtime. 
A Dockerfile containing such instructions would be the "base image" to our main Docker image which runs the actual analysis. To build the main
Docker image, we would need another Dockerfile. This Dockerfile would import the base image (i.e. an Ubuntu machine with R and R-Studio Server etc.
installed), download the data and source codes and run the analysis. 

Writing such Dockerfiles from scratch could be time consuming. I am, therefore, going to go over the principals by providing some templates
that have already been developed for this purpose. The template Dockerfiles are available on [GitHub](https://github.com/soroorh/toolsforreproducibleresearch)

### The Base Image 

The following is a template for the base Dockerfile that we would need to use to build the base image.

```
FROM ubuntu:14.04
MAINTAINER Soroor Hediyeh Zadeh <hediyehzadeh.s@wehi.edu.au>
RUN echo "deb http://cran.ms.unimelb.edu.au/bin/linux/ubuntu trusty/" >> /etc/apt/sources.list   
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9 
RUN apt-get update
RUN apt-get install -y software-properties-common libxml2-dev
RUN add-apt-repository ppa:marutter/rdev
RUN apt-get update  
RUN apt-get upgrade -y
RUN apt-get install -y -q r-base r-base-dev gdebi-core libapparmor1 supervisor wget git
RUN (wget https://download2.rstudio.org/rstudio-server-0.99.902-amd64.deb && gdebi -n rstudio-server-0.99.902-amd64.deb)
RUN rm /rstudio-server-0.99.902-amd64.deb
RUN (adduser --disabled-password --gecos "" user && echo "user:user"|chpasswd)
RUN mkdir -p /var/log/supervisor
ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf
EXPOSE 8787
CMD ["/usr/bin/supervisord"]

```
Here, the `FROM` instruction in line 1 imports Ubuntu version 14.04 image from ubuntu repository (in DockerHub). This
installs Ubuntu on our null computing environment.
The `MAINTAINER` instruction specifies the name of the author(s) of the image. In line 3  the `RUN` instruction is used to run
a command. This command adds the path to download the latest version of R from a particular CRAN minor repository to the relevant search path in ubuntu.
This ensures that at each build run the latest R version - that was used by the authors at the time of the study- is installed. 
Note that the R version will be identical to the one used in the original study, and will not change with running the image.
However, if the image is re-built, then the instruction tells Docker to check for the latest version in the specified CRAN minor and
install the latest version. The path can be replaced with the path to your desired CRAN minor repository.

lines 4-9 install required dependencies to install R on a ubuntu machine. `apt-get` is a unix command for installing software. Line 10 
is a nice example of how required programs can be installed. Here, line 10 is instructing Docker to install programs such as
base R, R-Devel (development version of R), gdebi-core (required for installing R-Studio Server), wget ( download from a link),
git (for version control) and supervisor (for setting up users accounts). Line 11 downloads and installs R-Studio Server 
version 0.99.902 for 64bit. As new versions of R become available, new R-Studio Server versions become available, too. So,
make sure you replace the R-Studio download link with the latest link (visit RStudio website for more information),
if you're using the template. Once the R-Studio Server is installed, the source download file is not required any more, and can 
be removed (line 12). The `RUN` instruction in Line 13 instructs Docker to set up a user account , named "user", and sets a password
for this account (user:user). Docker then creates a directory called `supervisor/` under `/var/log` directory in ubuntu, using `mkdir` command
for creating directories. The `ADD` instruction in line 15 is used to add the `supervisord.conf` script from the current local directory
to the directory that was just created. This executable is available with the template on GitHub repository. Line 18 uses `EXPOSE` instruction
to tell the docker to listen for 8787 port on the network to be called at the runtime. This is the port that initiates an instance of 
R-Studio Server. Once the image is run from the command-line/terminal, Docker would wait for the user to call this port from the browser.
It would then run the image. In the final line, the executable `supervisor` is run, which is responsible to create a login page.

### The Main Image

#### Data Organisation

Ideally, data should be organised in a meaningful and structured manner. For example, there should be a `/data` directory that is home
to the all data used in the experiment. The source codes go under the `/scripts` directory, and the results can be stored in the`/output/
directory. Having data organised this way, it would be easier to locate the files

## Docker commands cheatsheet 



